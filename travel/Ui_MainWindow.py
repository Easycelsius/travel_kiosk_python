# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import time

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QObject, pyqtSignal, QEvent
from PyQt5.QtWidgets import QAction, qApp, QHeaderView, QMainWindow, QDialog, QTableWidgetItem
import oracle

# from kiosk.travel.sub import Ui_Dialog

print("mainPage")

class Ui_MainWindow(QMainWindow):

    # 오라클로부터 상품 목록 얻기
    product_list = oracle.viewDB("product")

    def setupUi(self, MainWindow):

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(998, 500)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # 옵션 메뉴
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 940, 21))
        self.menubar.setObjectName("menubar")

        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")

        MainWindow.setMenuBar(self.menubar)

        self.actionTable = QtWidgets.QAction(MainWindow)
        self.actionTable.setObjectName("actionTable")
        self.menu.addAction(self.actionTable)
        self.menubar.addAction(self.menu.menuAction())
        self.actionTable.triggered.connect(qApp.quit)

        # 그리드 레이아웃
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")

        # 좌측 그리드
        self.product_label = QtWidgets.QLabel(self.centralwidget)
        self.product_label.setObjectName("product_label")
        self.gridLayout.addWidget(self.product_label, 0, 0, 1, 3)


        pic_x, pic_y, count = 1, 0, 0
        for i in range(1, 10):
            # 사진
            globals()['self.pic{}'.format(i)] = QtWidgets.QLabel(self.centralwidget)
            var = globals()['self.pic{}'.format(i)]
            var.setPixmap(QtGui.QPixmap("img/{}.jpg".format(i)).scaledToWidth(189))
            var.setScaledContents(True)
            var.setObjectName('pic{}'.format(i))
            self.gridLayout.addWidget(var, pic_x, pic_y, 1, 2)

            # 사진 함수 연결
            if i == 1:
                self.clickable(var).connect(lambda: self.click_pic("1"))
            elif i == 2:
                self.clickable(var).connect(lambda: self.click_pic("2"))
            elif i == 3:
                self.clickable(var).connect(lambda: self.click_pic("3"))
            elif i == 4:
                self.clickable(var).connect(lambda: self.click_pic("4"))
            elif i == 5:
                self.clickable(var).connect(lambda: self.click_pic("5"))
            elif i == 6:
                self.clickable(var).connect(lambda: self.click_pic("6"))
            elif i == 7:
                self.clickable(var).connect(lambda: self.click_pic("7"))
            elif i == 8:
                self.clickable(var).connect(lambda: self.click_pic("8"))
            elif i == 9:
                self.clickable(var).connect(lambda: self.click_pic("9"))

            # 상품명
            globals()['self.product{}'.format(i)] = QtWidgets.QLabel(self.centralwidget)
            var_pro = globals()['self.product{}'.format(i)]
            var_pro.setObjectName('product{}'.format(i))
            var_pro.setText(str(Ui_MainWindow.product_list[i - 1][2]))
            self.gridLayout.addWidget(var_pro, pic_x + 1, pic_y, 1, 1)

            # 가격
            globals()['self.price{}'.format(i)] = QtWidgets.QLabel()
            var_pri = globals()['self.price{}'.format(i)]
            var_pri.setObjectName("price{}".format(i))
            var_pri.setText("{:,}원".format(Ui_MainWindow.product_list[i - 1][3]).strip())
            var_pri.setAlignment(QtCore.Qt.AlignCenter)
            self.gridLayout.addWidget(var_pri, pic_x + 1, pic_y+1, 1, 1)

            count += 1
            pic_y += 2

            if count == 3:
                pic_x += 2
                count = 0
                pic_y = 0



        # 초기화 버튼
        self.initional = QtWidgets.QPushButton(self.centralwidget)
        self.initional.setObjectName("initional")
        self.gridLayout.addWidget(self.initional, 7, 0, 1, 6)
        self.initional.clicked.connect(lambda : self.click_pic("0"))

        # 우측 그리드
        self.bookmark_label = QtWidgets.QLabel(self.centralwidget)
        self.bookmark_label.setObjectName("bookmark_label")
        self.gridLayout.addWidget(self.bookmark_label, 0, 6, 1, 1)

        # 구매 내역 확인
        self.history = QtWidgets.QPushButton(self.centralwidget)
        self.history.setObjectName("history")
        self.gridLayout.addWidget(self.history, 0, 7, 1, 1)
        self.history.clicked.connect(self.history_window)

        # bookmark
        self.bookmark_table = QtWidgets.QTableWidget(self.centralwidget)
        self.bookmark_table.setMinimumSize(QtCore.QSize(381, 0))
        self.bookmark_table.setMouseTracking(True)
        self.bookmark_table.setTabletTracking(True)
        self.bookmark_table.setObjectName("bookmark_table")
        self.bookmark_table.setColumnCount(4)
        self.bookmark_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.bookmark_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.bookmark_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.bookmark_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.bookmark_table.setHorizontalHeaderItem(3, item)
        self.bookmark_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        # self.bookmark_table.horizontalHeader().setCascadingSectionResizes(True)
        # self.bookmark_table.horizontalHeader().setHighlightSections(True)
        # self.bookmark_table.horizontalHeader().setStretchLastSection(False)
        # self.bookmark_table.verticalHeader().setCascadingSectionResizes(False)
        self.gridLayout.addWidget(self.bookmark_table, 1, 6, 6, 2)

        # 합계
        self.total = QtWidgets.QLabel(self.centralwidget)
        self.total.setObjectName("total")
        self.gridLayout.addWidget(self.total, 7, 6, 1, 1)

        # 구매 완료 버튼
        self.buy = QtWidgets.QPushButton(self.centralwidget)
        self.buy.setObjectName("buy")
        self.gridLayout.addWidget(self.buy, 7, 7, 1, 1)
        self.buy.clicked.connect(self.buy_complete)

        # 중앙 고정
        MainWindow.setCentralWidget(self.centralwidget)

        # 상태창
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        self.statusbar.showMessage("정상접속 / 과부하시 프로그램이 강제 종료될 수 있음")
        MainWindow.setStatusBar(self.statusbar)

        # UI 조정
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "여행 상품 구매"))
        self.buy.setText(_translate("MainWindow", "구매 완료"))

        self.bookmark_table.setToolTip(_translate("MainWindow", "tue"))
        item = self.bookmark_table.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "상품번호"))
        item = self.bookmark_table.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "상품명"))
        item = self.bookmark_table.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "가격"))
        item = self.bookmark_table.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "여행사"))

        self.product_label.setText(_translate("MainWindow", "구매 가능 상품"))
        self.bookmark_label.setText(_translate("MainWindow", "장바구니"))
        self.initional.setText(_translate("MainWindow", "구매 초기화"))
        self.total.setText(_translate("MainWindow", "합계 :"))
        self.history.setText(_translate("MainWindow", "구매 내역 확인"))

        # 옵션
        self.menu.setTitle(_translate("MainWindow", "옵션"))
        self.actionTable.setText(_translate("MainWindow", "프로그램 종료"))

    def history_window(self):
        print("구매 내역 클릭")
        self.statusbar.showMessage("미완성 영역입니다. 추후 업데이트 진행 예정입니다. 감사합니다.")

    def show(self):
        super().show()

    # 클릭 가능 함수
    def clickable(self, widget):
        class Filter(QObject):
            clicked = pyqtSignal()  # pyside2 사용자는 pyqtSignal() -> Signal()로 변경
            def eventFilter(self, obj, event):
                if obj == widget:
                    if event.type() == QEvent.MouseButtonRelease:
                        if obj.rect().contains(event.pos()):
                            self.clicked.emit()
                            # The developer can opt for .emit(obj) to get the object within the slot.
                            return True
                return False
        filter = Filter(widget)
        widget.installEventFilter(filter)
        return filter.clicked

    order = {str(i): 0 for i in range(1, 10)}
    total_price = 0
    def click_pic(self, i):
        if i == "0":
            print("초기화 진행")
            self.order = {str(i): 0 for i in range(1, 10)}
            self.total_price = 0
            self.total.setText("합계 :")
            self.bookmark_table.setRowCount(0)
            self.statusbar.showMessage("장바구니를 초기화하였습니다")

        else:
            self.order[i] += 1

            # 테이블 조정
            rowPosition = self.bookmark_table.rowCount()

            # 테이블에 값 넣기
            self.bookmark_table.insertRow(rowPosition)
            self.bookmark_table.setItem(rowPosition, 0, QTableWidgetItem(self.product_list[int(i)-1][0]))
            self.bookmark_table.setItem(rowPosition, 1, QTableWidgetItem(self.product_list[int(i)-1][2]))
            self.bookmark_table.setItem(rowPosition, 2, QTableWidgetItem("{:,}원".format(self.product_list[int(i) - 1][3])))
            self.bookmark_table.setItem(rowPosition, 3, QTableWidgetItem(self.product_list[int(i)-1][1]))

            # 합계 계산
            self.total_price += self.product_list[int(i)-1][3]
            self.total.setText("합계 : {:,}원".format(self.total_price))

            print("클릭 이벤트 : ", self.order, self.total_price)
            self.statusbar.showMessage("클릭 이벤트 발생")

    def buy_complete(self):

        if self.total_price == 0:
            self.statusbar.showMessage("구매 사항이 없습니다. 상품을 입력해주세요.")
            return

        oracle.saveCotract(self.total_price)
        time.sleep(1)

        cid = oracle.find_sequence('cid', 'contract')[0][0]
        time.sleep(1)

        for k, v in self.order.items():
            if v > 0:
                oracle.saveHistory([str(cid), str(self.product_list[int(k)-1][0]), v, self.product_list[int(k)-1][3] * v])
                time.sleep(1)

        # 초기화
        self.click_pic("0")
        
        # 상태 메시지
        self.statusbar.showMessage("구매 사항 DB 입력 완료 / DB에서 확인 바랍니다")


if __name__ == "__main__":

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    # css 적용
    MainWindow.setStyleSheet(open('style.css').read())
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

